node('mvn') {
 try {
   // define commands
   
   // Slack Notification started
   
    notifyStarted()
    
   def mvnCmd = "mvn -s configuration/cicd-settings.xml"

   stage ('Build') {
     git branch: 'eap-7', url: 'http://gogs-cicd.app.lp.int/emre/openshift-tasks.git'
     sh "${mvnCmd} clean install -DskipTests=true"
   }

   stage ('Test and Analysis') {
     parallel (
         'Test': {
             sh "${mvnCmd} test"
             step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
         },
         'Static Analysis': {
             sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-cicd.app.lp.int -DskipTests=true"
         }
     )
   }

   stage ('Push to Nexus') {
    sh "${mvnCmd} deploy -DskipTests=true"
   }

   stage ('Deploy DEV') {
     sh "rm -rf oc-build && mkdir -p oc-build/deployments"
     sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
     // clean up. keep the image stream
     sh "oc delete bc,dc,svc,route -l app=tasks -n dev"
     // create build. override the exit code since it complains about exising imagestream
     sh "oc new-build --name=tasks --image-stream=jboss-eap70-openshift:1.5 --binary=true --labels=app=tasks -n dev || true"
     // build image
     sh "oc start-build tasks --from-dir=oc-build --wait=true -n dev"
     // deploy image
     sh "oc new-app tasks:latest -n dev"
     sh "oc expose svc/tasks -n dev"
   }

   stage ('Deploy STAGE') {
     timeout(time:5, unit:'MINUTES') {
        input message: "Promote to STAGE?", ok: "Promote"
     }

     def v = version()
     // tag for stage
     sh "oc tag dev/tasks:latest stage/tasks:${v}"
     // clean up. keep the imagestream
     sh "oc delete bc,dc,svc,route -l app=tasks -n stage"
     // deploy stage image
     sh "oc new-app tasks:${v} -n stage"
     sh "oc expose svc/tasks -n stage"
   }
   
   // Slack Notification Successfully Finished
   
   notifySuccessful()
 } catch (e) {
    currentBuild.result = "FAILED"
    notifyFailed()
    throw e
  }
}

def version() {
  def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def notifyStarted() {
  // send to Slack
  slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}
def notifySuccessful() {
  slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}
def notifyFailed() {
  slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}